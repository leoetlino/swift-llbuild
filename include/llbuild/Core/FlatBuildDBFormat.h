// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLATBUILDDB_LLBUILD_CORE_FORMAT_H_
#define FLATBUFFERS_GENERATED_FLATBUILDDB_LLBUILD_CORE_FORMAT_H_

#include "flatbuffers/flatbuffers.h"

namespace llbuild {
namespace core {
namespace format {

struct Info;

struct Dependencies;

struct RuleResult;

struct BuildDB;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Info FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t client_version_;
  int32_t padding0__;
  uint64_t iteration_;

 public:
  Info() {
    memset(static_cast<void *>(this), 0, sizeof(Info));
  }
  Info(uint32_t _client_version, uint64_t _iteration)
      : client_version_(flatbuffers::EndianScalar(_client_version)),
        padding0__(0),
        iteration_(flatbuffers::EndianScalar(_iteration)) {
    (void)padding0__;
  }
  uint32_t client_version() const {
    return flatbuffers::EndianScalar(client_version_);
  }
  uint64_t iteration() const {
    return flatbuffers::EndianScalar(iteration_);
  }
};
FLATBUFFERS_STRUCT_END(Info, 16);

struct Dependencies FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEYS = 4,
    VT_FLAGS = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *keys() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_KEYS);
  }
  const flatbuffers::Vector<uint8_t> *flags() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_FLAGS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_KEYS) &&
           verifier.VerifyVector(keys()) &&
           verifier.VerifyVectorOfStrings(keys()) &&
           VerifyOffsetRequired(verifier, VT_FLAGS) &&
           verifier.VerifyVector(flags()) &&
           verifier.EndTable();
  }
};

struct DependenciesBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_keys(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> keys) {
    fbb_.AddOffset(Dependencies::VT_KEYS, keys);
  }
  void add_flags(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> flags) {
    fbb_.AddOffset(Dependencies::VT_FLAGS, flags);
  }
  explicit DependenciesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DependenciesBuilder &operator=(const DependenciesBuilder &);
  flatbuffers::Offset<Dependencies> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Dependencies>(end);
    fbb_.Required(o, Dependencies::VT_KEYS);
    fbb_.Required(o, Dependencies::VT_FLAGS);
    return o;
  }
};

inline flatbuffers::Offset<Dependencies> CreateDependencies(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> keys = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> flags = 0) {
  DependenciesBuilder builder_(_fbb);
  builder_.add_flags(flags);
  builder_.add_keys(keys);
  return builder_.Finish();
}

inline flatbuffers::Offset<Dependencies> CreateDependenciesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *keys = nullptr,
    const std::vector<uint8_t> *flags = nullptr) {
  auto keys__ = keys ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*keys) : 0;
  auto flags__ = flags ? _fbb.CreateVector<uint8_t>(*flags) : 0;
  return llbuild::core::format::CreateDependencies(
      _fbb,
      keys__,
      flags__);
}

struct RuleResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_VALUE = 6,
    VT_SIGNATURE = 8,
    VT_BUILT_AT = 10,
    VT_COMPUTED_AT = 12,
    VT_START = 14,
    VT_END = 16,
    VT_DEPENDENCIES = 18
  };
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  const flatbuffers::Vector<uint8_t> *value() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  uint64_t signature() const {
    return GetField<uint64_t>(VT_SIGNATURE, 0);
  }
  uint64_t built_at() const {
    return GetField<uint64_t>(VT_BUILT_AT, 0);
  }
  uint64_t computed_at() const {
    return GetField<uint64_t>(VT_COMPUTED_AT, 0);
  }
  double start() const {
    return GetField<double>(VT_START, 0.0);
  }
  double end() const {
    return GetField<double>(VT_END, 0.0);
  }
  const Dependencies *dependencies() const {
    return GetPointer<const Dependencies *>(VT_DEPENDENCIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           VerifyField<uint64_t>(verifier, VT_SIGNATURE) &&
           VerifyField<uint64_t>(verifier, VT_BUILT_AT) &&
           VerifyField<uint64_t>(verifier, VT_COMPUTED_AT) &&
           VerifyField<double>(verifier, VT_START) &&
           VerifyField<double>(verifier, VT_END) &&
           VerifyOffsetRequired(verifier, VT_DEPENDENCIES) &&
           verifier.VerifyTable(dependencies()) &&
           verifier.EndTable();
  }
};

struct RuleResultBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(RuleResult::VT_KEY, key);
  }
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value) {
    fbb_.AddOffset(RuleResult::VT_VALUE, value);
  }
  void add_signature(uint64_t signature) {
    fbb_.AddElement<uint64_t>(RuleResult::VT_SIGNATURE, signature, 0);
  }
  void add_built_at(uint64_t built_at) {
    fbb_.AddElement<uint64_t>(RuleResult::VT_BUILT_AT, built_at, 0);
  }
  void add_computed_at(uint64_t computed_at) {
    fbb_.AddElement<uint64_t>(RuleResult::VT_COMPUTED_AT, computed_at, 0);
  }
  void add_start(double start) {
    fbb_.AddElement<double>(RuleResult::VT_START, start, 0.0);
  }
  void add_end(double end) {
    fbb_.AddElement<double>(RuleResult::VT_END, end, 0.0);
  }
  void add_dependencies(flatbuffers::Offset<Dependencies> dependencies) {
    fbb_.AddOffset(RuleResult::VT_DEPENDENCIES, dependencies);
  }
  explicit RuleResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RuleResultBuilder &operator=(const RuleResultBuilder &);
  flatbuffers::Offset<RuleResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RuleResult>(end);
    fbb_.Required(o, RuleResult::VT_KEY);
    fbb_.Required(o, RuleResult::VT_VALUE);
    fbb_.Required(o, RuleResult::VT_DEPENDENCIES);
    return o;
  }
};

inline flatbuffers::Offset<RuleResult> CreateRuleResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value = 0,
    uint64_t signature = 0,
    uint64_t built_at = 0,
    uint64_t computed_at = 0,
    double start = 0.0,
    double end = 0.0,
    flatbuffers::Offset<Dependencies> dependencies = 0) {
  RuleResultBuilder builder_(_fbb);
  builder_.add_end(end);
  builder_.add_start(start);
  builder_.add_computed_at(computed_at);
  builder_.add_built_at(built_at);
  builder_.add_signature(signature);
  builder_.add_dependencies(dependencies);
  builder_.add_value(value);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<RuleResult> CreateRuleResultDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const std::vector<uint8_t> *value = nullptr,
    uint64_t signature = 0,
    uint64_t built_at = 0,
    uint64_t computed_at = 0,
    double start = 0.0,
    double end = 0.0,
    flatbuffers::Offset<Dependencies> dependencies = 0) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto value__ = value ? _fbb.CreateVector<uint8_t>(*value) : 0;
  return llbuild::core::format::CreateRuleResult(
      _fbb,
      key__,
      value__,
      signature,
      built_at,
      computed_at,
      start,
      end,
      dependencies);
}

struct BuildDB FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INFO = 4,
    VT_RESULTS = 6
  };
  const Info *info() const {
    return GetStruct<const Info *>(VT_INFO);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RuleResult>> *results() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RuleResult>> *>(VT_RESULTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<Info>(verifier, VT_INFO) &&
           VerifyOffsetRequired(verifier, VT_RESULTS) &&
           verifier.VerifyVector(results()) &&
           verifier.VerifyVectorOfTables(results()) &&
           verifier.EndTable();
  }
};

struct BuildDBBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_info(const Info *info) {
    fbb_.AddStruct(BuildDB::VT_INFO, info);
  }
  void add_results(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RuleResult>>> results) {
    fbb_.AddOffset(BuildDB::VT_RESULTS, results);
  }
  explicit BuildDBBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BuildDBBuilder &operator=(const BuildDBBuilder &);
  flatbuffers::Offset<BuildDB> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BuildDB>(end);
    fbb_.Required(o, BuildDB::VT_INFO);
    fbb_.Required(o, BuildDB::VT_RESULTS);
    return o;
  }
};

inline flatbuffers::Offset<BuildDB> CreateBuildDB(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Info *info = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RuleResult>>> results = 0) {
  BuildDBBuilder builder_(_fbb);
  builder_.add_results(results);
  builder_.add_info(info);
  return builder_.Finish();
}

inline flatbuffers::Offset<BuildDB> CreateBuildDBDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Info *info = 0,
    const std::vector<flatbuffers::Offset<RuleResult>> *results = nullptr) {
  auto results__ = results ? _fbb.CreateVector<flatbuffers::Offset<RuleResult>>(*results) : 0;
  return llbuild::core::format::CreateBuildDB(
      _fbb,
      info,
      results__);
}

inline const llbuild::core::format::BuildDB *GetBuildDB(const void *buf) {
  return flatbuffers::GetRoot<llbuild::core::format::BuildDB>(buf);
}

inline const llbuild::core::format::BuildDB *GetSizePrefixedBuildDB(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<llbuild::core::format::BuildDB>(buf);
}

inline bool VerifyBuildDBBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<llbuild::core::format::BuildDB>(nullptr);
}

inline bool VerifySizePrefixedBuildDBBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<llbuild::core::format::BuildDB>(nullptr);
}

inline void FinishBuildDBBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<llbuild::core::format::BuildDB> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBuildDBBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<llbuild::core::format::BuildDB> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace format
}  // namespace core
}  // namespace llbuild

#endif  // FLATBUFFERS_GENERATED_FLATBUILDDB_LLBUILD_CORE_FORMAT_H_
